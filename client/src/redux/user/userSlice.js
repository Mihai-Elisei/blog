// Import the `createSlice` function from Redux Toolkit to help create a slice of the state.
import { createSlice } from "@reduxjs/toolkit";

// Define the initial state for the user slice, which will hold the current user data,
// error message if there's any, and loading status.
const initialState = {
  currentUser: null, // Stores the authenticated user data; null when no user is signed in.
  error: null, // Stores any error message related to user sign-in attempts.
  loading: false // Indicates whether a sign-in process is ongoing.
};

// Create a user slice with the name "user" and initial state defined above.
// This slice contains reducers that will handle sign-in actions.
const userSlice = createSlice({
  name: "user", // Name of the slice; used to identify it in the Redux store.
  initialState, // Initial state of this slice.
  reducers: {
    // Action to start the sign-in process; sets loading to true and clears any existing errors.
    signInStart: (state) => {
      state.loading = true; // Indicate that loading is in progress.
      state.error = null; // Clear any previous error.
    },
    // Action to handle a successful sign-in; sets the current user data and clears loading and error states.
    signInSuccess: (state, action) => {
      state.currentUser = action.payload; // Update the current user with the payload data.
      state.loading = false; // End loading state.
      state.error = null; // Clear any previous error.
    },
    // Action to handle a failed sign-in; stops loading and sets an error message.
    signInFailure: (state, action) => {
      state.loading = false; // End loading state.
      state.error = action.payload; // Set error message from payload.
    }
  }
});

// Export the action creators generated by `createSlice` for each reducer.
export const { signInStart, signInSuccess, signInFailure } = userSlice.actions;

// Export the user slice reducer to be used in the Redux store.
export default userSlice.reducer;
