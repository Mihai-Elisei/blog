// Import the `createSlice` function from Redux Toolkit to help create a slice of the state.
import { createSlice } from "@reduxjs/toolkit";

// Define the initial state for the user slice, which will hold the current user data,
// error message if there's any, and loading status.
const initialState = {
  currentUser: null, // Stores the authenticated user data; null when no user is signed in.
  error: null, // Stores any error message related to user sign-in attempts.
  loading: false // Indicates whether a sign-in process is ongoing.
};

// Create a user slice with the name "user" and initial state defined above.
// This slice contains reducers that will handle sign-in and user update actions.
const userSlice = createSlice({
  name: "user", // Name of the slice; used to identify it in the Redux store.
  initialState, // Initial state of this slice.
  reducers: {
    // Action to start the sign-in process; sets loading to true and clears any existing errors.
    signInStart: (state) => {
      state.loading = true; // Indicate that loading is in progress.
      state.error = null; // Clear any previous error.
    },
    // Action to handle a successful sign-in; sets the current user data and clears loading and error states.
    signInSuccess: (state, action) => {
      state.currentUser = action.payload; // Update the current user with the payload data (user info).
      state.loading = false; // End loading state as sign-in was successful.
      state.error = null; // Clear any previous error since sign-in was successful.
    },
    // Action to handle a failed sign-in; stops loading and sets an error message.
    signInFailure: (state, action) => {
      state.loading = false; // End loading state as sign-in has failed.
      state.error = action.payload; // Set error message from payload (typically error details).
    },
    // Action to start the user update process; sets loading to true and clears any existing errors.
    updateStart: (state) => {
      state.loading = true; // Indicate that loading is in progress for updating user.
      state.error = null; // Clear any previous error before starting the update.
    },
    // Action to handle a successful user update; updates the current user and refreshes state accordingly.
    updateSuccess: (state, action) => {
      state.currentUser = action.payload; // Update the current user data with the new payload (updated user info).
      state.loading = false; // End loading state as update was successful.
      state.error = null; // Clear any previous error since update was successful.
    },
    // Action to handle a failed user update; stops loading and sets an error message.
    updateFailure: (state, action) => {
      state.loading = false; // End loading state as update has failed.
      state.error = action.payload; // Set error message from payload (typically error details).
    }
  }
});

// Export the action creators generated by `createSlice` for each reducer.
// These can be dispatched in components to trigger state changes.
export const {
  signInStart,
  signInSuccess,
  signInFailure,
  updateStart,
  updateSuccess,
  updateFailure
} = userSlice.actions;

// Export the user slice reducer to be used in the Redux store.
// This reducer will handle state changes triggered by the dispatched actions.
export default userSlice.reducer;
